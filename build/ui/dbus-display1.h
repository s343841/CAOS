/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __DBUS_DISPLAY1_H__
#define __DBUS_DISPLAY1_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.qemu.Display1.VM */

#define QEMU_DBUS_TYPE_DISPLAY1_VM (qemu_dbus_display1_vm_get_type ())
#define QEMU_DBUS_DISPLAY1_VM(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_VM, QemuDBusDisplay1VM))
#define QEMU_DBUS_IS_DISPLAY1_VM(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_VM))
#define QEMU_DBUS_DISPLAY1_VM_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), QEMU_DBUS_TYPE_DISPLAY1_VM, QemuDBusDisplay1VMIface))

struct _QemuDBusDisplay1VM;
typedef struct _QemuDBusDisplay1VM QemuDBusDisplay1VM;
typedef struct _QemuDBusDisplay1VMIface QemuDBusDisplay1VMIface;

struct _QemuDBusDisplay1VMIface
{
  GTypeInterface parent_iface;

  GVariant * (*get_console_ids) (QemuDBusDisplay1VM *object);

  const gchar * (*get_name) (QemuDBusDisplay1VM *object);

  const gchar * (*get_uuid) (QemuDBusDisplay1VM *object);

};

GType qemu_dbus_display1_vm_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *qemu_dbus_display1_vm_interface_info (void);
guint qemu_dbus_display1_vm_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *qemu_dbus_display1_vm_get_name (QemuDBusDisplay1VM *object);
gchar *qemu_dbus_display1_vm_dup_name (QemuDBusDisplay1VM *object);
void qemu_dbus_display1_vm_set_name (QemuDBusDisplay1VM *object, const gchar *value);

const gchar *qemu_dbus_display1_vm_get_uuid (QemuDBusDisplay1VM *object);
gchar *qemu_dbus_display1_vm_dup_uuid (QemuDBusDisplay1VM *object);
void qemu_dbus_display1_vm_set_uuid (QemuDBusDisplay1VM *object, const gchar *value);

GVariant *qemu_dbus_display1_vm_get_console_ids (QemuDBusDisplay1VM *object);
GVariant *qemu_dbus_display1_vm_dup_console_ids (QemuDBusDisplay1VM *object);
void qemu_dbus_display1_vm_set_console_ids (QemuDBusDisplay1VM *object, GVariant *value);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_VM_PROXY (qemu_dbus_display1_vm_proxy_get_type ())
#define QEMU_DBUS_DISPLAY1_VM_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_VM_PROXY, QemuDBusDisplay1VMProxy))
#define QEMU_DBUS_DISPLAY1_VM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_VM_PROXY, QemuDBusDisplay1VMProxyClass))
#define QEMU_DBUS_DISPLAY1_VM_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_VM_PROXY, QemuDBusDisplay1VMProxyClass))
#define QEMU_DBUS_IS_DISPLAY1_VM_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_VM_PROXY))
#define QEMU_DBUS_IS_DISPLAY1_VM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_VM_PROXY))

typedef struct _QemuDBusDisplay1VMProxy QemuDBusDisplay1VMProxy;
typedef struct _QemuDBusDisplay1VMProxyClass QemuDBusDisplay1VMProxyClass;
typedef struct _QemuDBusDisplay1VMProxyPrivate QemuDBusDisplay1VMProxyPrivate;

struct _QemuDBusDisplay1VMProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  QemuDBusDisplay1VMProxyPrivate *priv;
};

struct _QemuDBusDisplay1VMProxyClass
{
  GDBusProxyClass parent_class;
};

GType qemu_dbus_display1_vm_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1VMProxy, g_object_unref)
#endif

void qemu_dbus_display1_vm_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1VM *qemu_dbus_display1_vm_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1VM *qemu_dbus_display1_vm_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void qemu_dbus_display1_vm_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1VM *qemu_dbus_display1_vm_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1VM *qemu_dbus_display1_vm_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_VM_SKELETON (qemu_dbus_display1_vm_skeleton_get_type ())
#define QEMU_DBUS_DISPLAY1_VM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_VM_SKELETON, QemuDBusDisplay1VMSkeleton))
#define QEMU_DBUS_DISPLAY1_VM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_VM_SKELETON, QemuDBusDisplay1VMSkeletonClass))
#define QEMU_DBUS_DISPLAY1_VM_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_VM_SKELETON, QemuDBusDisplay1VMSkeletonClass))
#define QEMU_DBUS_IS_DISPLAY1_VM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_VM_SKELETON))
#define QEMU_DBUS_IS_DISPLAY1_VM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_VM_SKELETON))

typedef struct _QemuDBusDisplay1VMSkeleton QemuDBusDisplay1VMSkeleton;
typedef struct _QemuDBusDisplay1VMSkeletonClass QemuDBusDisplay1VMSkeletonClass;
typedef struct _QemuDBusDisplay1VMSkeletonPrivate QemuDBusDisplay1VMSkeletonPrivate;

struct _QemuDBusDisplay1VMSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  QemuDBusDisplay1VMSkeletonPrivate *priv;
};

struct _QemuDBusDisplay1VMSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType qemu_dbus_display1_vm_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1VMSkeleton, g_object_unref)
#endif

QemuDBusDisplay1VM *qemu_dbus_display1_vm_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.qemu.Display1.Console */

#define QEMU_DBUS_TYPE_DISPLAY1_CONSOLE (qemu_dbus_display1_console_get_type ())
#define QEMU_DBUS_DISPLAY1_CONSOLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE, QemuDBusDisplay1Console))
#define QEMU_DBUS_IS_DISPLAY1_CONSOLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE))
#define QEMU_DBUS_DISPLAY1_CONSOLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE, QemuDBusDisplay1ConsoleIface))

struct _QemuDBusDisplay1Console;
typedef struct _QemuDBusDisplay1Console QemuDBusDisplay1Console;
typedef struct _QemuDBusDisplay1ConsoleIface QemuDBusDisplay1ConsoleIface;

struct _QemuDBusDisplay1ConsoleIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_register_listener) (
    QemuDBusDisplay1Console *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    GVariant *arg_listener);

  gboolean (*handle_set_uiinfo) (
    QemuDBusDisplay1Console *object,
    GDBusMethodInvocation *invocation,
    guint16 arg_width_mm,
    guint16 arg_height_mm,
    gint arg_xoff,
    gint arg_yoff,
    guint arg_width,
    guint arg_height);

  const gchar * (*get_device_address) (QemuDBusDisplay1Console *object);

  guint  (*get_head) (QemuDBusDisplay1Console *object);

  guint  (*get_height) (QemuDBusDisplay1Console *object);

  const gchar * (*get_label) (QemuDBusDisplay1Console *object);

  const gchar * (*get_type_) (QemuDBusDisplay1Console *object);

  guint  (*get_width) (QemuDBusDisplay1Console *object);

};

GType qemu_dbus_display1_console_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *qemu_dbus_display1_console_interface_info (void);
guint qemu_dbus_display1_console_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void qemu_dbus_display1_console_complete_register_listener (
    QemuDBusDisplay1Console *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list);

void qemu_dbus_display1_console_complete_set_uiinfo (
    QemuDBusDisplay1Console *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void qemu_dbus_display1_console_call_register_listener (
    QemuDBusDisplay1Console *proxy,
    GVariant *arg_listener,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_console_call_register_listener_finish (
    QemuDBusDisplay1Console *proxy,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_console_call_register_listener_sync (
    QemuDBusDisplay1Console *proxy,
    GVariant *arg_listener,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GUnixFDList  *fd_list,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_console_call_set_uiinfo (
    QemuDBusDisplay1Console *proxy,
    guint16 arg_width_mm,
    guint16 arg_height_mm,
    gint arg_xoff,
    gint arg_yoff,
    guint arg_width,
    guint arg_height,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_console_call_set_uiinfo_finish (
    QemuDBusDisplay1Console *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_console_call_set_uiinfo_sync (
    QemuDBusDisplay1Console *proxy,
    guint16 arg_width_mm,
    guint16 arg_height_mm,
    gint arg_xoff,
    gint arg_yoff,
    guint arg_width,
    guint arg_height,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *qemu_dbus_display1_console_get_label (QemuDBusDisplay1Console *object);
gchar *qemu_dbus_display1_console_dup_label (QemuDBusDisplay1Console *object);
void qemu_dbus_display1_console_set_label (QemuDBusDisplay1Console *object, const gchar *value);

guint qemu_dbus_display1_console_get_head (QemuDBusDisplay1Console *object);
void qemu_dbus_display1_console_set_head (QemuDBusDisplay1Console *object, guint value);

const gchar *qemu_dbus_display1_console_get_type_ (QemuDBusDisplay1Console *object);
gchar *qemu_dbus_display1_console_dup_type_ (QemuDBusDisplay1Console *object);
void qemu_dbus_display1_console_set_type_ (QemuDBusDisplay1Console *object, const gchar *value);

guint qemu_dbus_display1_console_get_width (QemuDBusDisplay1Console *object);
void qemu_dbus_display1_console_set_width (QemuDBusDisplay1Console *object, guint value);

guint qemu_dbus_display1_console_get_height (QemuDBusDisplay1Console *object);
void qemu_dbus_display1_console_set_height (QemuDBusDisplay1Console *object, guint value);

const gchar *qemu_dbus_display1_console_get_device_address (QemuDBusDisplay1Console *object);
gchar *qemu_dbus_display1_console_dup_device_address (QemuDBusDisplay1Console *object);
void qemu_dbus_display1_console_set_device_address (QemuDBusDisplay1Console *object, const gchar *value);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_PROXY (qemu_dbus_display1_console_proxy_get_type ())
#define QEMU_DBUS_DISPLAY1_CONSOLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_PROXY, QemuDBusDisplay1ConsoleProxy))
#define QEMU_DBUS_DISPLAY1_CONSOLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_PROXY, QemuDBusDisplay1ConsoleProxyClass))
#define QEMU_DBUS_DISPLAY1_CONSOLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_PROXY, QemuDBusDisplay1ConsoleProxyClass))
#define QEMU_DBUS_IS_DISPLAY1_CONSOLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_PROXY))
#define QEMU_DBUS_IS_DISPLAY1_CONSOLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_PROXY))

typedef struct _QemuDBusDisplay1ConsoleProxy QemuDBusDisplay1ConsoleProxy;
typedef struct _QemuDBusDisplay1ConsoleProxyClass QemuDBusDisplay1ConsoleProxyClass;
typedef struct _QemuDBusDisplay1ConsoleProxyPrivate QemuDBusDisplay1ConsoleProxyPrivate;

struct _QemuDBusDisplay1ConsoleProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  QemuDBusDisplay1ConsoleProxyPrivate *priv;
};

struct _QemuDBusDisplay1ConsoleProxyClass
{
  GDBusProxyClass parent_class;
};

GType qemu_dbus_display1_console_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1ConsoleProxy, g_object_unref)
#endif

void qemu_dbus_display1_console_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Console *qemu_dbus_display1_console_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Console *qemu_dbus_display1_console_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void qemu_dbus_display1_console_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Console *qemu_dbus_display1_console_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Console *qemu_dbus_display1_console_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_SKELETON (qemu_dbus_display1_console_skeleton_get_type ())
#define QEMU_DBUS_DISPLAY1_CONSOLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_SKELETON, QemuDBusDisplay1ConsoleSkeleton))
#define QEMU_DBUS_DISPLAY1_CONSOLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_SKELETON, QemuDBusDisplay1ConsoleSkeletonClass))
#define QEMU_DBUS_DISPLAY1_CONSOLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_SKELETON, QemuDBusDisplay1ConsoleSkeletonClass))
#define QEMU_DBUS_IS_DISPLAY1_CONSOLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_SKELETON))
#define QEMU_DBUS_IS_DISPLAY1_CONSOLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_CONSOLE_SKELETON))

typedef struct _QemuDBusDisplay1ConsoleSkeleton QemuDBusDisplay1ConsoleSkeleton;
typedef struct _QemuDBusDisplay1ConsoleSkeletonClass QemuDBusDisplay1ConsoleSkeletonClass;
typedef struct _QemuDBusDisplay1ConsoleSkeletonPrivate QemuDBusDisplay1ConsoleSkeletonPrivate;

struct _QemuDBusDisplay1ConsoleSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  QemuDBusDisplay1ConsoleSkeletonPrivate *priv;
};

struct _QemuDBusDisplay1ConsoleSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType qemu_dbus_display1_console_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1ConsoleSkeleton, g_object_unref)
#endif

QemuDBusDisplay1Console *qemu_dbus_display1_console_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.qemu.Display1.Keyboard */

#define QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD (qemu_dbus_display1_keyboard_get_type ())
#define QEMU_DBUS_DISPLAY1_KEYBOARD(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD, QemuDBusDisplay1Keyboard))
#define QEMU_DBUS_IS_DISPLAY1_KEYBOARD(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD))
#define QEMU_DBUS_DISPLAY1_KEYBOARD_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD, QemuDBusDisplay1KeyboardIface))

struct _QemuDBusDisplay1Keyboard;
typedef struct _QemuDBusDisplay1Keyboard QemuDBusDisplay1Keyboard;
typedef struct _QemuDBusDisplay1KeyboardIface QemuDBusDisplay1KeyboardIface;

struct _QemuDBusDisplay1KeyboardIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_press) (
    QemuDBusDisplay1Keyboard *object,
    GDBusMethodInvocation *invocation,
    guint arg_keycode);

  gboolean (*handle_release) (
    QemuDBusDisplay1Keyboard *object,
    GDBusMethodInvocation *invocation,
    guint arg_keycode);

  guint  (*get_modifiers) (QemuDBusDisplay1Keyboard *object);

};

GType qemu_dbus_display1_keyboard_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *qemu_dbus_display1_keyboard_interface_info (void);
guint qemu_dbus_display1_keyboard_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void qemu_dbus_display1_keyboard_complete_press (
    QemuDBusDisplay1Keyboard *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_keyboard_complete_release (
    QemuDBusDisplay1Keyboard *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void qemu_dbus_display1_keyboard_call_press (
    QemuDBusDisplay1Keyboard *proxy,
    guint arg_keycode,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_keyboard_call_press_finish (
    QemuDBusDisplay1Keyboard *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_keyboard_call_press_sync (
    QemuDBusDisplay1Keyboard *proxy,
    guint arg_keycode,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_keyboard_call_release (
    QemuDBusDisplay1Keyboard *proxy,
    guint arg_keycode,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_keyboard_call_release_finish (
    QemuDBusDisplay1Keyboard *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_keyboard_call_release_sync (
    QemuDBusDisplay1Keyboard *proxy,
    guint arg_keycode,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint qemu_dbus_display1_keyboard_get_modifiers (QemuDBusDisplay1Keyboard *object);
void qemu_dbus_display1_keyboard_set_modifiers (QemuDBusDisplay1Keyboard *object, guint value);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_PROXY (qemu_dbus_display1_keyboard_proxy_get_type ())
#define QEMU_DBUS_DISPLAY1_KEYBOARD_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_PROXY, QemuDBusDisplay1KeyboardProxy))
#define QEMU_DBUS_DISPLAY1_KEYBOARD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_PROXY, QemuDBusDisplay1KeyboardProxyClass))
#define QEMU_DBUS_DISPLAY1_KEYBOARD_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_PROXY, QemuDBusDisplay1KeyboardProxyClass))
#define QEMU_DBUS_IS_DISPLAY1_KEYBOARD_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_PROXY))
#define QEMU_DBUS_IS_DISPLAY1_KEYBOARD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_PROXY))

typedef struct _QemuDBusDisplay1KeyboardProxy QemuDBusDisplay1KeyboardProxy;
typedef struct _QemuDBusDisplay1KeyboardProxyClass QemuDBusDisplay1KeyboardProxyClass;
typedef struct _QemuDBusDisplay1KeyboardProxyPrivate QemuDBusDisplay1KeyboardProxyPrivate;

struct _QemuDBusDisplay1KeyboardProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  QemuDBusDisplay1KeyboardProxyPrivate *priv;
};

struct _QemuDBusDisplay1KeyboardProxyClass
{
  GDBusProxyClass parent_class;
};

GType qemu_dbus_display1_keyboard_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1KeyboardProxy, g_object_unref)
#endif

void qemu_dbus_display1_keyboard_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Keyboard *qemu_dbus_display1_keyboard_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Keyboard *qemu_dbus_display1_keyboard_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void qemu_dbus_display1_keyboard_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Keyboard *qemu_dbus_display1_keyboard_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Keyboard *qemu_dbus_display1_keyboard_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_SKELETON (qemu_dbus_display1_keyboard_skeleton_get_type ())
#define QEMU_DBUS_DISPLAY1_KEYBOARD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_SKELETON, QemuDBusDisplay1KeyboardSkeleton))
#define QEMU_DBUS_DISPLAY1_KEYBOARD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_SKELETON, QemuDBusDisplay1KeyboardSkeletonClass))
#define QEMU_DBUS_DISPLAY1_KEYBOARD_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_SKELETON, QemuDBusDisplay1KeyboardSkeletonClass))
#define QEMU_DBUS_IS_DISPLAY1_KEYBOARD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_SKELETON))
#define QEMU_DBUS_IS_DISPLAY1_KEYBOARD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_KEYBOARD_SKELETON))

typedef struct _QemuDBusDisplay1KeyboardSkeleton QemuDBusDisplay1KeyboardSkeleton;
typedef struct _QemuDBusDisplay1KeyboardSkeletonClass QemuDBusDisplay1KeyboardSkeletonClass;
typedef struct _QemuDBusDisplay1KeyboardSkeletonPrivate QemuDBusDisplay1KeyboardSkeletonPrivate;

struct _QemuDBusDisplay1KeyboardSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  QemuDBusDisplay1KeyboardSkeletonPrivate *priv;
};

struct _QemuDBusDisplay1KeyboardSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType qemu_dbus_display1_keyboard_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1KeyboardSkeleton, g_object_unref)
#endif

QemuDBusDisplay1Keyboard *qemu_dbus_display1_keyboard_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.qemu.Display1.Mouse */

#define QEMU_DBUS_TYPE_DISPLAY1_MOUSE (qemu_dbus_display1_mouse_get_type ())
#define QEMU_DBUS_DISPLAY1_MOUSE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_MOUSE, QemuDBusDisplay1Mouse))
#define QEMU_DBUS_IS_DISPLAY1_MOUSE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_MOUSE))
#define QEMU_DBUS_DISPLAY1_MOUSE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), QEMU_DBUS_TYPE_DISPLAY1_MOUSE, QemuDBusDisplay1MouseIface))

struct _QemuDBusDisplay1Mouse;
typedef struct _QemuDBusDisplay1Mouse QemuDBusDisplay1Mouse;
typedef struct _QemuDBusDisplay1MouseIface QemuDBusDisplay1MouseIface;

struct _QemuDBusDisplay1MouseIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_press) (
    QemuDBusDisplay1Mouse *object,
    GDBusMethodInvocation *invocation,
    guint arg_button);

  gboolean (*handle_rel_motion) (
    QemuDBusDisplay1Mouse *object,
    GDBusMethodInvocation *invocation,
    gint arg_dx,
    gint arg_dy);

  gboolean (*handle_release) (
    QemuDBusDisplay1Mouse *object,
    GDBusMethodInvocation *invocation,
    guint arg_button);

  gboolean (*handle_set_abs_position) (
    QemuDBusDisplay1Mouse *object,
    GDBusMethodInvocation *invocation,
    guint arg_x,
    guint arg_y);

  gboolean  (*get_is_absolute) (QemuDBusDisplay1Mouse *object);

};

GType qemu_dbus_display1_mouse_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *qemu_dbus_display1_mouse_interface_info (void);
guint qemu_dbus_display1_mouse_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void qemu_dbus_display1_mouse_complete_press (
    QemuDBusDisplay1Mouse *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_mouse_complete_release (
    QemuDBusDisplay1Mouse *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_mouse_complete_set_abs_position (
    QemuDBusDisplay1Mouse *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_mouse_complete_rel_motion (
    QemuDBusDisplay1Mouse *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void qemu_dbus_display1_mouse_call_press (
    QemuDBusDisplay1Mouse *proxy,
    guint arg_button,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_mouse_call_press_finish (
    QemuDBusDisplay1Mouse *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_mouse_call_press_sync (
    QemuDBusDisplay1Mouse *proxy,
    guint arg_button,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_mouse_call_release (
    QemuDBusDisplay1Mouse *proxy,
    guint arg_button,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_mouse_call_release_finish (
    QemuDBusDisplay1Mouse *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_mouse_call_release_sync (
    QemuDBusDisplay1Mouse *proxy,
    guint arg_button,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_mouse_call_set_abs_position (
    QemuDBusDisplay1Mouse *proxy,
    guint arg_x,
    guint arg_y,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_mouse_call_set_abs_position_finish (
    QemuDBusDisplay1Mouse *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_mouse_call_set_abs_position_sync (
    QemuDBusDisplay1Mouse *proxy,
    guint arg_x,
    guint arg_y,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_mouse_call_rel_motion (
    QemuDBusDisplay1Mouse *proxy,
    gint arg_dx,
    gint arg_dy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_mouse_call_rel_motion_finish (
    QemuDBusDisplay1Mouse *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_mouse_call_rel_motion_sync (
    QemuDBusDisplay1Mouse *proxy,
    gint arg_dx,
    gint arg_dy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean qemu_dbus_display1_mouse_get_is_absolute (QemuDBusDisplay1Mouse *object);
void qemu_dbus_display1_mouse_set_is_absolute (QemuDBusDisplay1Mouse *object, gboolean value);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_MOUSE_PROXY (qemu_dbus_display1_mouse_proxy_get_type ())
#define QEMU_DBUS_DISPLAY1_MOUSE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_MOUSE_PROXY, QemuDBusDisplay1MouseProxy))
#define QEMU_DBUS_DISPLAY1_MOUSE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_MOUSE_PROXY, QemuDBusDisplay1MouseProxyClass))
#define QEMU_DBUS_DISPLAY1_MOUSE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_MOUSE_PROXY, QemuDBusDisplay1MouseProxyClass))
#define QEMU_DBUS_IS_DISPLAY1_MOUSE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_MOUSE_PROXY))
#define QEMU_DBUS_IS_DISPLAY1_MOUSE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_MOUSE_PROXY))

typedef struct _QemuDBusDisplay1MouseProxy QemuDBusDisplay1MouseProxy;
typedef struct _QemuDBusDisplay1MouseProxyClass QemuDBusDisplay1MouseProxyClass;
typedef struct _QemuDBusDisplay1MouseProxyPrivate QemuDBusDisplay1MouseProxyPrivate;

struct _QemuDBusDisplay1MouseProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  QemuDBusDisplay1MouseProxyPrivate *priv;
};

struct _QemuDBusDisplay1MouseProxyClass
{
  GDBusProxyClass parent_class;
};

GType qemu_dbus_display1_mouse_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1MouseProxy, g_object_unref)
#endif

void qemu_dbus_display1_mouse_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Mouse *qemu_dbus_display1_mouse_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Mouse *qemu_dbus_display1_mouse_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void qemu_dbus_display1_mouse_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Mouse *qemu_dbus_display1_mouse_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Mouse *qemu_dbus_display1_mouse_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_MOUSE_SKELETON (qemu_dbus_display1_mouse_skeleton_get_type ())
#define QEMU_DBUS_DISPLAY1_MOUSE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_MOUSE_SKELETON, QemuDBusDisplay1MouseSkeleton))
#define QEMU_DBUS_DISPLAY1_MOUSE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_MOUSE_SKELETON, QemuDBusDisplay1MouseSkeletonClass))
#define QEMU_DBUS_DISPLAY1_MOUSE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_MOUSE_SKELETON, QemuDBusDisplay1MouseSkeletonClass))
#define QEMU_DBUS_IS_DISPLAY1_MOUSE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_MOUSE_SKELETON))
#define QEMU_DBUS_IS_DISPLAY1_MOUSE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_MOUSE_SKELETON))

typedef struct _QemuDBusDisplay1MouseSkeleton QemuDBusDisplay1MouseSkeleton;
typedef struct _QemuDBusDisplay1MouseSkeletonClass QemuDBusDisplay1MouseSkeletonClass;
typedef struct _QemuDBusDisplay1MouseSkeletonPrivate QemuDBusDisplay1MouseSkeletonPrivate;

struct _QemuDBusDisplay1MouseSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  QemuDBusDisplay1MouseSkeletonPrivate *priv;
};

struct _QemuDBusDisplay1MouseSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType qemu_dbus_display1_mouse_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1MouseSkeleton, g_object_unref)
#endif

QemuDBusDisplay1Mouse *qemu_dbus_display1_mouse_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.qemu.Display1.Listener */

#define QEMU_DBUS_TYPE_DISPLAY1_LISTENER (qemu_dbus_display1_listener_get_type ())
#define QEMU_DBUS_DISPLAY1_LISTENER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_LISTENER, QemuDBusDisplay1Listener))
#define QEMU_DBUS_IS_DISPLAY1_LISTENER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_LISTENER))
#define QEMU_DBUS_DISPLAY1_LISTENER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), QEMU_DBUS_TYPE_DISPLAY1_LISTENER, QemuDBusDisplay1ListenerIface))

struct _QemuDBusDisplay1Listener;
typedef struct _QemuDBusDisplay1Listener QemuDBusDisplay1Listener;
typedef struct _QemuDBusDisplay1ListenerIface QemuDBusDisplay1ListenerIface;

struct _QemuDBusDisplay1ListenerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_cursor_define) (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation,
    gint arg_width,
    gint arg_height,
    gint arg_hot_x,
    gint arg_hot_y,
    GVariant *arg_data);

  gboolean (*handle_disable) (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_mouse_set) (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y,
    gint arg_on);

  gboolean (*handle_scanout) (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation,
    guint arg_width,
    guint arg_height,
    guint arg_stride,
    guint arg_pixman_format,
    GVariant *arg_data);

  gboolean (*handle_scanout_dmabuf) (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    GVariant *arg_dmabuf,
    guint arg_width,
    guint arg_height,
    guint arg_stride,
    guint arg_fourcc,
    guint64 arg_modifier,
    gboolean arg_y0_top);

  gboolean (*handle_update) (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    guint arg_stride,
    guint arg_pixman_format,
    GVariant *arg_data);

  gboolean (*handle_update_dmabuf) (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height);

};

GType qemu_dbus_display1_listener_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *qemu_dbus_display1_listener_interface_info (void);
guint qemu_dbus_display1_listener_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void qemu_dbus_display1_listener_complete_scanout (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_listener_complete_update (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_listener_complete_scanout_dmabuf (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list);

void qemu_dbus_display1_listener_complete_update_dmabuf (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_listener_complete_disable (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_listener_complete_mouse_set (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_listener_complete_cursor_define (
    QemuDBusDisplay1Listener *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void qemu_dbus_display1_listener_call_scanout (
    QemuDBusDisplay1Listener *proxy,
    guint arg_width,
    guint arg_height,
    guint arg_stride,
    guint arg_pixman_format,
    GVariant *arg_data,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_listener_call_scanout_finish (
    QemuDBusDisplay1Listener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_listener_call_scanout_sync (
    QemuDBusDisplay1Listener *proxy,
    guint arg_width,
    guint arg_height,
    guint arg_stride,
    guint arg_pixman_format,
    GVariant *arg_data,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_listener_call_update (
    QemuDBusDisplay1Listener *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    guint arg_stride,
    guint arg_pixman_format,
    GVariant *arg_data,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_listener_call_update_finish (
    QemuDBusDisplay1Listener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_listener_call_update_sync (
    QemuDBusDisplay1Listener *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    guint arg_stride,
    guint arg_pixman_format,
    GVariant *arg_data,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_listener_call_scanout_dmabuf (
    QemuDBusDisplay1Listener *proxy,
    GVariant *arg_dmabuf,
    guint arg_width,
    guint arg_height,
    guint arg_stride,
    guint arg_fourcc,
    guint64 arg_modifier,
    gboolean arg_y0_top,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_listener_call_scanout_dmabuf_finish (
    QemuDBusDisplay1Listener *proxy,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_listener_call_scanout_dmabuf_sync (
    QemuDBusDisplay1Listener *proxy,
    GVariant *arg_dmabuf,
    guint arg_width,
    guint arg_height,
    guint arg_stride,
    guint arg_fourcc,
    guint64 arg_modifier,
    gboolean arg_y0_top,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GUnixFDList  *fd_list,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_listener_call_update_dmabuf (
    QemuDBusDisplay1Listener *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_listener_call_update_dmabuf_finish (
    QemuDBusDisplay1Listener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_listener_call_update_dmabuf_sync (
    QemuDBusDisplay1Listener *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_listener_call_disable (
    QemuDBusDisplay1Listener *proxy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_listener_call_disable_finish (
    QemuDBusDisplay1Listener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_listener_call_disable_sync (
    QemuDBusDisplay1Listener *proxy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_listener_call_mouse_set (
    QemuDBusDisplay1Listener *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_on,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_listener_call_mouse_set_finish (
    QemuDBusDisplay1Listener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_listener_call_mouse_set_sync (
    QemuDBusDisplay1Listener *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_on,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_listener_call_cursor_define (
    QemuDBusDisplay1Listener *proxy,
    gint arg_width,
    gint arg_height,
    gint arg_hot_x,
    gint arg_hot_y,
    GVariant *arg_data,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_listener_call_cursor_define_finish (
    QemuDBusDisplay1Listener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_listener_call_cursor_define_sync (
    QemuDBusDisplay1Listener *proxy,
    gint arg_width,
    gint arg_height,
    gint arg_hot_x,
    gint arg_hot_y,
    GVariant *arg_data,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_LISTENER_PROXY (qemu_dbus_display1_listener_proxy_get_type ())
#define QEMU_DBUS_DISPLAY1_LISTENER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_LISTENER_PROXY, QemuDBusDisplay1ListenerProxy))
#define QEMU_DBUS_DISPLAY1_LISTENER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_LISTENER_PROXY, QemuDBusDisplay1ListenerProxyClass))
#define QEMU_DBUS_DISPLAY1_LISTENER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_LISTENER_PROXY, QemuDBusDisplay1ListenerProxyClass))
#define QEMU_DBUS_IS_DISPLAY1_LISTENER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_LISTENER_PROXY))
#define QEMU_DBUS_IS_DISPLAY1_LISTENER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_LISTENER_PROXY))

typedef struct _QemuDBusDisplay1ListenerProxy QemuDBusDisplay1ListenerProxy;
typedef struct _QemuDBusDisplay1ListenerProxyClass QemuDBusDisplay1ListenerProxyClass;
typedef struct _QemuDBusDisplay1ListenerProxyPrivate QemuDBusDisplay1ListenerProxyPrivate;

struct _QemuDBusDisplay1ListenerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  QemuDBusDisplay1ListenerProxyPrivate *priv;
};

struct _QemuDBusDisplay1ListenerProxyClass
{
  GDBusProxyClass parent_class;
};

GType qemu_dbus_display1_listener_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1ListenerProxy, g_object_unref)
#endif

void qemu_dbus_display1_listener_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Listener *qemu_dbus_display1_listener_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Listener *qemu_dbus_display1_listener_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void qemu_dbus_display1_listener_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Listener *qemu_dbus_display1_listener_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Listener *qemu_dbus_display1_listener_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_LISTENER_SKELETON (qemu_dbus_display1_listener_skeleton_get_type ())
#define QEMU_DBUS_DISPLAY1_LISTENER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_LISTENER_SKELETON, QemuDBusDisplay1ListenerSkeleton))
#define QEMU_DBUS_DISPLAY1_LISTENER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_LISTENER_SKELETON, QemuDBusDisplay1ListenerSkeletonClass))
#define QEMU_DBUS_DISPLAY1_LISTENER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_LISTENER_SKELETON, QemuDBusDisplay1ListenerSkeletonClass))
#define QEMU_DBUS_IS_DISPLAY1_LISTENER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_LISTENER_SKELETON))
#define QEMU_DBUS_IS_DISPLAY1_LISTENER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_LISTENER_SKELETON))

typedef struct _QemuDBusDisplay1ListenerSkeleton QemuDBusDisplay1ListenerSkeleton;
typedef struct _QemuDBusDisplay1ListenerSkeletonClass QemuDBusDisplay1ListenerSkeletonClass;
typedef struct _QemuDBusDisplay1ListenerSkeletonPrivate QemuDBusDisplay1ListenerSkeletonPrivate;

struct _QemuDBusDisplay1ListenerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  QemuDBusDisplay1ListenerSkeletonPrivate *priv;
};

struct _QemuDBusDisplay1ListenerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType qemu_dbus_display1_listener_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1ListenerSkeleton, g_object_unref)
#endif

QemuDBusDisplay1Listener *qemu_dbus_display1_listener_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.qemu.Display1.Clipboard */

#define QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD (qemu_dbus_display1_clipboard_get_type ())
#define QEMU_DBUS_DISPLAY1_CLIPBOARD(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD, QemuDBusDisplay1Clipboard))
#define QEMU_DBUS_IS_DISPLAY1_CLIPBOARD(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD))
#define QEMU_DBUS_DISPLAY1_CLIPBOARD_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD, QemuDBusDisplay1ClipboardIface))

struct _QemuDBusDisplay1Clipboard;
typedef struct _QemuDBusDisplay1Clipboard QemuDBusDisplay1Clipboard;
typedef struct _QemuDBusDisplay1ClipboardIface QemuDBusDisplay1ClipboardIface;

struct _QemuDBusDisplay1ClipboardIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_grab) (
    QemuDBusDisplay1Clipboard *object,
    GDBusMethodInvocation *invocation,
    guint arg_selection,
    guint arg_serial,
    const gchar *const *arg_mimes);

  gboolean (*handle_register) (
    QemuDBusDisplay1Clipboard *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_release) (
    QemuDBusDisplay1Clipboard *object,
    GDBusMethodInvocation *invocation,
    guint arg_selection);

  gboolean (*handle_request) (
    QemuDBusDisplay1Clipboard *object,
    GDBusMethodInvocation *invocation,
    guint arg_selection,
    const gchar *const *arg_mimes);

  gboolean (*handle_unregister) (
    QemuDBusDisplay1Clipboard *object,
    GDBusMethodInvocation *invocation);

};

GType qemu_dbus_display1_clipboard_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *qemu_dbus_display1_clipboard_interface_info (void);
guint qemu_dbus_display1_clipboard_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void qemu_dbus_display1_clipboard_complete_register (
    QemuDBusDisplay1Clipboard *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_clipboard_complete_unregister (
    QemuDBusDisplay1Clipboard *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_clipboard_complete_grab (
    QemuDBusDisplay1Clipboard *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_clipboard_complete_release (
    QemuDBusDisplay1Clipboard *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_clipboard_complete_request (
    QemuDBusDisplay1Clipboard *object,
    GDBusMethodInvocation *invocation,
    const gchar *reply_mime,
    GVariant *data);



/* D-Bus method calls: */
void qemu_dbus_display1_clipboard_call_register (
    QemuDBusDisplay1Clipboard *proxy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_clipboard_call_register_finish (
    QemuDBusDisplay1Clipboard *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_clipboard_call_register_sync (
    QemuDBusDisplay1Clipboard *proxy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_clipboard_call_unregister (
    QemuDBusDisplay1Clipboard *proxy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_clipboard_call_unregister_finish (
    QemuDBusDisplay1Clipboard *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_clipboard_call_unregister_sync (
    QemuDBusDisplay1Clipboard *proxy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_clipboard_call_grab (
    QemuDBusDisplay1Clipboard *proxy,
    guint arg_selection,
    guint arg_serial,
    const gchar *const *arg_mimes,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_clipboard_call_grab_finish (
    QemuDBusDisplay1Clipboard *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_clipboard_call_grab_sync (
    QemuDBusDisplay1Clipboard *proxy,
    guint arg_selection,
    guint arg_serial,
    const gchar *const *arg_mimes,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_clipboard_call_release (
    QemuDBusDisplay1Clipboard *proxy,
    guint arg_selection,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_clipboard_call_release_finish (
    QemuDBusDisplay1Clipboard *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_clipboard_call_release_sync (
    QemuDBusDisplay1Clipboard *proxy,
    guint arg_selection,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_clipboard_call_request (
    QemuDBusDisplay1Clipboard *proxy,
    guint arg_selection,
    const gchar *const *arg_mimes,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_clipboard_call_request_finish (
    QemuDBusDisplay1Clipboard *proxy,
    gchar **out_reply_mime,
    GVariant **out_data,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_clipboard_call_request_sync (
    QemuDBusDisplay1Clipboard *proxy,
    guint arg_selection,
    const gchar *const *arg_mimes,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    gchar **out_reply_mime,
    GVariant **out_data,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_PROXY (qemu_dbus_display1_clipboard_proxy_get_type ())
#define QEMU_DBUS_DISPLAY1_CLIPBOARD_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_PROXY, QemuDBusDisplay1ClipboardProxy))
#define QEMU_DBUS_DISPLAY1_CLIPBOARD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_PROXY, QemuDBusDisplay1ClipboardProxyClass))
#define QEMU_DBUS_DISPLAY1_CLIPBOARD_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_PROXY, QemuDBusDisplay1ClipboardProxyClass))
#define QEMU_DBUS_IS_DISPLAY1_CLIPBOARD_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_PROXY))
#define QEMU_DBUS_IS_DISPLAY1_CLIPBOARD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_PROXY))

typedef struct _QemuDBusDisplay1ClipboardProxy QemuDBusDisplay1ClipboardProxy;
typedef struct _QemuDBusDisplay1ClipboardProxyClass QemuDBusDisplay1ClipboardProxyClass;
typedef struct _QemuDBusDisplay1ClipboardProxyPrivate QemuDBusDisplay1ClipboardProxyPrivate;

struct _QemuDBusDisplay1ClipboardProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  QemuDBusDisplay1ClipboardProxyPrivate *priv;
};

struct _QemuDBusDisplay1ClipboardProxyClass
{
  GDBusProxyClass parent_class;
};

GType qemu_dbus_display1_clipboard_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1ClipboardProxy, g_object_unref)
#endif

void qemu_dbus_display1_clipboard_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Clipboard *qemu_dbus_display1_clipboard_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Clipboard *qemu_dbus_display1_clipboard_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void qemu_dbus_display1_clipboard_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Clipboard *qemu_dbus_display1_clipboard_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Clipboard *qemu_dbus_display1_clipboard_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_SKELETON (qemu_dbus_display1_clipboard_skeleton_get_type ())
#define QEMU_DBUS_DISPLAY1_CLIPBOARD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_SKELETON, QemuDBusDisplay1ClipboardSkeleton))
#define QEMU_DBUS_DISPLAY1_CLIPBOARD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_SKELETON, QemuDBusDisplay1ClipboardSkeletonClass))
#define QEMU_DBUS_DISPLAY1_CLIPBOARD_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_SKELETON, QemuDBusDisplay1ClipboardSkeletonClass))
#define QEMU_DBUS_IS_DISPLAY1_CLIPBOARD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_SKELETON))
#define QEMU_DBUS_IS_DISPLAY1_CLIPBOARD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_CLIPBOARD_SKELETON))

typedef struct _QemuDBusDisplay1ClipboardSkeleton QemuDBusDisplay1ClipboardSkeleton;
typedef struct _QemuDBusDisplay1ClipboardSkeletonClass QemuDBusDisplay1ClipboardSkeletonClass;
typedef struct _QemuDBusDisplay1ClipboardSkeletonPrivate QemuDBusDisplay1ClipboardSkeletonPrivate;

struct _QemuDBusDisplay1ClipboardSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  QemuDBusDisplay1ClipboardSkeletonPrivate *priv;
};

struct _QemuDBusDisplay1ClipboardSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType qemu_dbus_display1_clipboard_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1ClipboardSkeleton, g_object_unref)
#endif

QemuDBusDisplay1Clipboard *qemu_dbus_display1_clipboard_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.qemu.Display1.Audio */

#define QEMU_DBUS_TYPE_DISPLAY1_AUDIO (qemu_dbus_display1_audio_get_type ())
#define QEMU_DBUS_DISPLAY1_AUDIO(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO, QemuDBusDisplay1Audio))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO))
#define QEMU_DBUS_DISPLAY1_AUDIO_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO, QemuDBusDisplay1AudioIface))

struct _QemuDBusDisplay1Audio;
typedef struct _QemuDBusDisplay1Audio QemuDBusDisplay1Audio;
typedef struct _QemuDBusDisplay1AudioIface QemuDBusDisplay1AudioIface;

struct _QemuDBusDisplay1AudioIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_register_in_listener) (
    QemuDBusDisplay1Audio *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    GVariant *arg_listener);

  gboolean (*handle_register_out_listener) (
    QemuDBusDisplay1Audio *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    GVariant *arg_listener);

};

GType qemu_dbus_display1_audio_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *qemu_dbus_display1_audio_interface_info (void);
guint qemu_dbus_display1_audio_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void qemu_dbus_display1_audio_complete_register_out_listener (
    QemuDBusDisplay1Audio *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list);

void qemu_dbus_display1_audio_complete_register_in_listener (
    QemuDBusDisplay1Audio *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list);



/* D-Bus method calls: */
void qemu_dbus_display1_audio_call_register_out_listener (
    QemuDBusDisplay1Audio *proxy,
    GVariant *arg_listener,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_call_register_out_listener_finish (
    QemuDBusDisplay1Audio *proxy,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_call_register_out_listener_sync (
    QemuDBusDisplay1Audio *proxy,
    GVariant *arg_listener,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GUnixFDList  *fd_list,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_audio_call_register_in_listener (
    QemuDBusDisplay1Audio *proxy,
    GVariant *arg_listener,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_call_register_in_listener_finish (
    QemuDBusDisplay1Audio *proxy,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_call_register_in_listener_sync (
    QemuDBusDisplay1Audio *proxy,
    GVariant *arg_listener,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GUnixFDList  *fd_list,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_AUDIO_PROXY (qemu_dbus_display1_audio_proxy_get_type ())
#define QEMU_DBUS_DISPLAY1_AUDIO_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_PROXY, QemuDBusDisplay1AudioProxy))
#define QEMU_DBUS_DISPLAY1_AUDIO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_PROXY, QemuDBusDisplay1AudioProxyClass))
#define QEMU_DBUS_DISPLAY1_AUDIO_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_PROXY, QemuDBusDisplay1AudioProxyClass))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_PROXY))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_PROXY))

typedef struct _QemuDBusDisplay1AudioProxy QemuDBusDisplay1AudioProxy;
typedef struct _QemuDBusDisplay1AudioProxyClass QemuDBusDisplay1AudioProxyClass;
typedef struct _QemuDBusDisplay1AudioProxyPrivate QemuDBusDisplay1AudioProxyPrivate;

struct _QemuDBusDisplay1AudioProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  QemuDBusDisplay1AudioProxyPrivate *priv;
};

struct _QemuDBusDisplay1AudioProxyClass
{
  GDBusProxyClass parent_class;
};

GType qemu_dbus_display1_audio_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1AudioProxy, g_object_unref)
#endif

void qemu_dbus_display1_audio_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Audio *qemu_dbus_display1_audio_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Audio *qemu_dbus_display1_audio_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void qemu_dbus_display1_audio_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Audio *qemu_dbus_display1_audio_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Audio *qemu_dbus_display1_audio_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_AUDIO_SKELETON (qemu_dbus_display1_audio_skeleton_get_type ())
#define QEMU_DBUS_DISPLAY1_AUDIO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_SKELETON, QemuDBusDisplay1AudioSkeleton))
#define QEMU_DBUS_DISPLAY1_AUDIO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_SKELETON, QemuDBusDisplay1AudioSkeletonClass))
#define QEMU_DBUS_DISPLAY1_AUDIO_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_SKELETON, QemuDBusDisplay1AudioSkeletonClass))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_SKELETON))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_SKELETON))

typedef struct _QemuDBusDisplay1AudioSkeleton QemuDBusDisplay1AudioSkeleton;
typedef struct _QemuDBusDisplay1AudioSkeletonClass QemuDBusDisplay1AudioSkeletonClass;
typedef struct _QemuDBusDisplay1AudioSkeletonPrivate QemuDBusDisplay1AudioSkeletonPrivate;

struct _QemuDBusDisplay1AudioSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  QemuDBusDisplay1AudioSkeletonPrivate *priv;
};

struct _QemuDBusDisplay1AudioSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType qemu_dbus_display1_audio_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1AudioSkeleton, g_object_unref)
#endif

QemuDBusDisplay1Audio *qemu_dbus_display1_audio_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.qemu.Display1.AudioOutListener */

#define QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER (qemu_dbus_display1_audio_out_listener_get_type ())
#define QEMU_DBUS_DISPLAY1_AUDIO_OUT_LISTENER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER, QemuDBusDisplay1AudioOutListener))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_OUT_LISTENER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER))
#define QEMU_DBUS_DISPLAY1_AUDIO_OUT_LISTENER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER, QemuDBusDisplay1AudioOutListenerIface))

struct _QemuDBusDisplay1AudioOutListener;
typedef struct _QemuDBusDisplay1AudioOutListener QemuDBusDisplay1AudioOutListener;
typedef struct _QemuDBusDisplay1AudioOutListenerIface QemuDBusDisplay1AudioOutListenerIface;

struct _QemuDBusDisplay1AudioOutListenerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_fini) (
    QemuDBusDisplay1AudioOutListener *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_id);

  gboolean (*handle_init) (
    QemuDBusDisplay1AudioOutListener *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_id,
    guchar arg_bits,
    gboolean arg_is_signed,
    gboolean arg_is_float,
    guint arg_freq,
    guchar arg_nchannels,
    guint arg_bytes_per_frame,
    guint arg_bytes_per_second,
    gboolean arg_be);

  gboolean (*handle_set_enabled) (
    QemuDBusDisplay1AudioOutListener *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_id,
    gboolean arg_enabled);

  gboolean (*handle_set_volume) (
    QemuDBusDisplay1AudioOutListener *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_id,
    gboolean arg_mute,
    GVariant *arg_volume);

  gboolean (*handle_write) (
    QemuDBusDisplay1AudioOutListener *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_id,
    GVariant *arg_data);

};

GType qemu_dbus_display1_audio_out_listener_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *qemu_dbus_display1_audio_out_listener_interface_info (void);
guint qemu_dbus_display1_audio_out_listener_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void qemu_dbus_display1_audio_out_listener_complete_init (
    QemuDBusDisplay1AudioOutListener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_audio_out_listener_complete_fini (
    QemuDBusDisplay1AudioOutListener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_audio_out_listener_complete_set_enabled (
    QemuDBusDisplay1AudioOutListener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_audio_out_listener_complete_set_volume (
    QemuDBusDisplay1AudioOutListener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_audio_out_listener_complete_write (
    QemuDBusDisplay1AudioOutListener *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void qemu_dbus_display1_audio_out_listener_call_init (
    QemuDBusDisplay1AudioOutListener *proxy,
    guint64 arg_id,
    guchar arg_bits,
    gboolean arg_is_signed,
    gboolean arg_is_float,
    guint arg_freq,
    guchar arg_nchannels,
    guint arg_bytes_per_frame,
    guint arg_bytes_per_second,
    gboolean arg_be,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_out_listener_call_init_finish (
    QemuDBusDisplay1AudioOutListener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_out_listener_call_init_sync (
    QemuDBusDisplay1AudioOutListener *proxy,
    guint64 arg_id,
    guchar arg_bits,
    gboolean arg_is_signed,
    gboolean arg_is_float,
    guint arg_freq,
    guchar arg_nchannels,
    guint arg_bytes_per_frame,
    guint arg_bytes_per_second,
    gboolean arg_be,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_audio_out_listener_call_fini (
    QemuDBusDisplay1AudioOutListener *proxy,
    guint64 arg_id,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_out_listener_call_fini_finish (
    QemuDBusDisplay1AudioOutListener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_out_listener_call_fini_sync (
    QemuDBusDisplay1AudioOutListener *proxy,
    guint64 arg_id,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_audio_out_listener_call_set_enabled (
    QemuDBusDisplay1AudioOutListener *proxy,
    guint64 arg_id,
    gboolean arg_enabled,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_out_listener_call_set_enabled_finish (
    QemuDBusDisplay1AudioOutListener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_out_listener_call_set_enabled_sync (
    QemuDBusDisplay1AudioOutListener *proxy,
    guint64 arg_id,
    gboolean arg_enabled,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_audio_out_listener_call_set_volume (
    QemuDBusDisplay1AudioOutListener *proxy,
    guint64 arg_id,
    gboolean arg_mute,
    GVariant *arg_volume,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_out_listener_call_set_volume_finish (
    QemuDBusDisplay1AudioOutListener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_out_listener_call_set_volume_sync (
    QemuDBusDisplay1AudioOutListener *proxy,
    guint64 arg_id,
    gboolean arg_mute,
    GVariant *arg_volume,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_audio_out_listener_call_write (
    QemuDBusDisplay1AudioOutListener *proxy,
    guint64 arg_id,
    GVariant *arg_data,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_out_listener_call_write_finish (
    QemuDBusDisplay1AudioOutListener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_out_listener_call_write_sync (
    QemuDBusDisplay1AudioOutListener *proxy,
    guint64 arg_id,
    GVariant *arg_data,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_PROXY (qemu_dbus_display1_audio_out_listener_proxy_get_type ())
#define QEMU_DBUS_DISPLAY1_AUDIO_OUT_LISTENER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_PROXY, QemuDBusDisplay1AudioOutListenerProxy))
#define QEMU_DBUS_DISPLAY1_AUDIO_OUT_LISTENER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_PROXY, QemuDBusDisplay1AudioOutListenerProxyClass))
#define QEMU_DBUS_DISPLAY1_AUDIO_OUT_LISTENER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_PROXY, QemuDBusDisplay1AudioOutListenerProxyClass))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_OUT_LISTENER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_PROXY))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_OUT_LISTENER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_PROXY))

typedef struct _QemuDBusDisplay1AudioOutListenerProxy QemuDBusDisplay1AudioOutListenerProxy;
typedef struct _QemuDBusDisplay1AudioOutListenerProxyClass QemuDBusDisplay1AudioOutListenerProxyClass;
typedef struct _QemuDBusDisplay1AudioOutListenerProxyPrivate QemuDBusDisplay1AudioOutListenerProxyPrivate;

struct _QemuDBusDisplay1AudioOutListenerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  QemuDBusDisplay1AudioOutListenerProxyPrivate *priv;
};

struct _QemuDBusDisplay1AudioOutListenerProxyClass
{
  GDBusProxyClass parent_class;
};

GType qemu_dbus_display1_audio_out_listener_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1AudioOutListenerProxy, g_object_unref)
#endif

void qemu_dbus_display1_audio_out_listener_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1AudioOutListener *qemu_dbus_display1_audio_out_listener_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1AudioOutListener *qemu_dbus_display1_audio_out_listener_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void qemu_dbus_display1_audio_out_listener_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1AudioOutListener *qemu_dbus_display1_audio_out_listener_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1AudioOutListener *qemu_dbus_display1_audio_out_listener_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_SKELETON (qemu_dbus_display1_audio_out_listener_skeleton_get_type ())
#define QEMU_DBUS_DISPLAY1_AUDIO_OUT_LISTENER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_SKELETON, QemuDBusDisplay1AudioOutListenerSkeleton))
#define QEMU_DBUS_DISPLAY1_AUDIO_OUT_LISTENER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_SKELETON, QemuDBusDisplay1AudioOutListenerSkeletonClass))
#define QEMU_DBUS_DISPLAY1_AUDIO_OUT_LISTENER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_SKELETON, QemuDBusDisplay1AudioOutListenerSkeletonClass))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_OUT_LISTENER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_SKELETON))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_OUT_LISTENER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_OUT_LISTENER_SKELETON))

typedef struct _QemuDBusDisplay1AudioOutListenerSkeleton QemuDBusDisplay1AudioOutListenerSkeleton;
typedef struct _QemuDBusDisplay1AudioOutListenerSkeletonClass QemuDBusDisplay1AudioOutListenerSkeletonClass;
typedef struct _QemuDBusDisplay1AudioOutListenerSkeletonPrivate QemuDBusDisplay1AudioOutListenerSkeletonPrivate;

struct _QemuDBusDisplay1AudioOutListenerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  QemuDBusDisplay1AudioOutListenerSkeletonPrivate *priv;
};

struct _QemuDBusDisplay1AudioOutListenerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType qemu_dbus_display1_audio_out_listener_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1AudioOutListenerSkeleton, g_object_unref)
#endif

QemuDBusDisplay1AudioOutListener *qemu_dbus_display1_audio_out_listener_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.qemu.Display1.AudioInListener */

#define QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER (qemu_dbus_display1_audio_in_listener_get_type ())
#define QEMU_DBUS_DISPLAY1_AUDIO_IN_LISTENER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER, QemuDBusDisplay1AudioInListener))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_IN_LISTENER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER))
#define QEMU_DBUS_DISPLAY1_AUDIO_IN_LISTENER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER, QemuDBusDisplay1AudioInListenerIface))

struct _QemuDBusDisplay1AudioInListener;
typedef struct _QemuDBusDisplay1AudioInListener QemuDBusDisplay1AudioInListener;
typedef struct _QemuDBusDisplay1AudioInListenerIface QemuDBusDisplay1AudioInListenerIface;

struct _QemuDBusDisplay1AudioInListenerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_fini) (
    QemuDBusDisplay1AudioInListener *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_id);

  gboolean (*handle_init) (
    QemuDBusDisplay1AudioInListener *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_id,
    guchar arg_bits,
    gboolean arg_is_signed,
    gboolean arg_is_float,
    guint arg_freq,
    guchar arg_nchannels,
    guint arg_bytes_per_frame,
    guint arg_bytes_per_second,
    gboolean arg_be);

  gboolean (*handle_read) (
    QemuDBusDisplay1AudioInListener *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_id,
    guint64 arg_size);

  gboolean (*handle_set_enabled) (
    QemuDBusDisplay1AudioInListener *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_id,
    gboolean arg_enabled);

  gboolean (*handle_set_volume) (
    QemuDBusDisplay1AudioInListener *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_id,
    gboolean arg_mute,
    GVariant *arg_volume);

};

GType qemu_dbus_display1_audio_in_listener_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *qemu_dbus_display1_audio_in_listener_interface_info (void);
guint qemu_dbus_display1_audio_in_listener_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void qemu_dbus_display1_audio_in_listener_complete_init (
    QemuDBusDisplay1AudioInListener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_audio_in_listener_complete_fini (
    QemuDBusDisplay1AudioInListener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_audio_in_listener_complete_set_enabled (
    QemuDBusDisplay1AudioInListener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_audio_in_listener_complete_set_volume (
    QemuDBusDisplay1AudioInListener *object,
    GDBusMethodInvocation *invocation);

void qemu_dbus_display1_audio_in_listener_complete_read (
    QemuDBusDisplay1AudioInListener *object,
    GDBusMethodInvocation *invocation,
    GVariant *data);



/* D-Bus method calls: */
void qemu_dbus_display1_audio_in_listener_call_init (
    QemuDBusDisplay1AudioInListener *proxy,
    guint64 arg_id,
    guchar arg_bits,
    gboolean arg_is_signed,
    gboolean arg_is_float,
    guint arg_freq,
    guchar arg_nchannels,
    guint arg_bytes_per_frame,
    guint arg_bytes_per_second,
    gboolean arg_be,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_in_listener_call_init_finish (
    QemuDBusDisplay1AudioInListener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_in_listener_call_init_sync (
    QemuDBusDisplay1AudioInListener *proxy,
    guint64 arg_id,
    guchar arg_bits,
    gboolean arg_is_signed,
    gboolean arg_is_float,
    guint arg_freq,
    guchar arg_nchannels,
    guint arg_bytes_per_frame,
    guint arg_bytes_per_second,
    gboolean arg_be,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_audio_in_listener_call_fini (
    QemuDBusDisplay1AudioInListener *proxy,
    guint64 arg_id,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_in_listener_call_fini_finish (
    QemuDBusDisplay1AudioInListener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_in_listener_call_fini_sync (
    QemuDBusDisplay1AudioInListener *proxy,
    guint64 arg_id,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_audio_in_listener_call_set_enabled (
    QemuDBusDisplay1AudioInListener *proxy,
    guint64 arg_id,
    gboolean arg_enabled,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_in_listener_call_set_enabled_finish (
    QemuDBusDisplay1AudioInListener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_in_listener_call_set_enabled_sync (
    QemuDBusDisplay1AudioInListener *proxy,
    guint64 arg_id,
    gboolean arg_enabled,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_audio_in_listener_call_set_volume (
    QemuDBusDisplay1AudioInListener *proxy,
    guint64 arg_id,
    gboolean arg_mute,
    GVariant *arg_volume,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_in_listener_call_set_volume_finish (
    QemuDBusDisplay1AudioInListener *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_in_listener_call_set_volume_sync (
    QemuDBusDisplay1AudioInListener *proxy,
    guint64 arg_id,
    gboolean arg_mute,
    GVariant *arg_volume,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_audio_in_listener_call_read (
    QemuDBusDisplay1AudioInListener *proxy,
    guint64 arg_id,
    guint64 arg_size,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_audio_in_listener_call_read_finish (
    QemuDBusDisplay1AudioInListener *proxy,
    GVariant **out_data,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_audio_in_listener_call_read_sync (
    QemuDBusDisplay1AudioInListener *proxy,
    guint64 arg_id,
    guint64 arg_size,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GVariant **out_data,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_PROXY (qemu_dbus_display1_audio_in_listener_proxy_get_type ())
#define QEMU_DBUS_DISPLAY1_AUDIO_IN_LISTENER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_PROXY, QemuDBusDisplay1AudioInListenerProxy))
#define QEMU_DBUS_DISPLAY1_AUDIO_IN_LISTENER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_PROXY, QemuDBusDisplay1AudioInListenerProxyClass))
#define QEMU_DBUS_DISPLAY1_AUDIO_IN_LISTENER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_PROXY, QemuDBusDisplay1AudioInListenerProxyClass))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_IN_LISTENER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_PROXY))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_IN_LISTENER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_PROXY))

typedef struct _QemuDBusDisplay1AudioInListenerProxy QemuDBusDisplay1AudioInListenerProxy;
typedef struct _QemuDBusDisplay1AudioInListenerProxyClass QemuDBusDisplay1AudioInListenerProxyClass;
typedef struct _QemuDBusDisplay1AudioInListenerProxyPrivate QemuDBusDisplay1AudioInListenerProxyPrivate;

struct _QemuDBusDisplay1AudioInListenerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  QemuDBusDisplay1AudioInListenerProxyPrivate *priv;
};

struct _QemuDBusDisplay1AudioInListenerProxyClass
{
  GDBusProxyClass parent_class;
};

GType qemu_dbus_display1_audio_in_listener_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1AudioInListenerProxy, g_object_unref)
#endif

void qemu_dbus_display1_audio_in_listener_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1AudioInListener *qemu_dbus_display1_audio_in_listener_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1AudioInListener *qemu_dbus_display1_audio_in_listener_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void qemu_dbus_display1_audio_in_listener_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1AudioInListener *qemu_dbus_display1_audio_in_listener_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1AudioInListener *qemu_dbus_display1_audio_in_listener_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_SKELETON (qemu_dbus_display1_audio_in_listener_skeleton_get_type ())
#define QEMU_DBUS_DISPLAY1_AUDIO_IN_LISTENER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_SKELETON, QemuDBusDisplay1AudioInListenerSkeleton))
#define QEMU_DBUS_DISPLAY1_AUDIO_IN_LISTENER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_SKELETON, QemuDBusDisplay1AudioInListenerSkeletonClass))
#define QEMU_DBUS_DISPLAY1_AUDIO_IN_LISTENER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_SKELETON, QemuDBusDisplay1AudioInListenerSkeletonClass))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_IN_LISTENER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_SKELETON))
#define QEMU_DBUS_IS_DISPLAY1_AUDIO_IN_LISTENER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_AUDIO_IN_LISTENER_SKELETON))

typedef struct _QemuDBusDisplay1AudioInListenerSkeleton QemuDBusDisplay1AudioInListenerSkeleton;
typedef struct _QemuDBusDisplay1AudioInListenerSkeletonClass QemuDBusDisplay1AudioInListenerSkeletonClass;
typedef struct _QemuDBusDisplay1AudioInListenerSkeletonPrivate QemuDBusDisplay1AudioInListenerSkeletonPrivate;

struct _QemuDBusDisplay1AudioInListenerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  QemuDBusDisplay1AudioInListenerSkeletonPrivate *priv;
};

struct _QemuDBusDisplay1AudioInListenerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType qemu_dbus_display1_audio_in_listener_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1AudioInListenerSkeleton, g_object_unref)
#endif

QemuDBusDisplay1AudioInListener *qemu_dbus_display1_audio_in_listener_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.qemu.Display1.Chardev */

#define QEMU_DBUS_TYPE_DISPLAY1_CHARDEV (qemu_dbus_display1_chardev_get_type ())
#define QEMU_DBUS_DISPLAY1_CHARDEV(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV, QemuDBusDisplay1Chardev))
#define QEMU_DBUS_IS_DISPLAY1_CHARDEV(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV))
#define QEMU_DBUS_DISPLAY1_CHARDEV_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV, QemuDBusDisplay1ChardevIface))

struct _QemuDBusDisplay1Chardev;
typedef struct _QemuDBusDisplay1Chardev QemuDBusDisplay1Chardev;
typedef struct _QemuDBusDisplay1ChardevIface QemuDBusDisplay1ChardevIface;

struct _QemuDBusDisplay1ChardevIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_register) (
    QemuDBusDisplay1Chardev *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    GVariant *arg_stream);

  gboolean (*handle_send_break) (
    QemuDBusDisplay1Chardev *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_echo) (QemuDBusDisplay1Chardev *object);

  gboolean  (*get_feopened) (QemuDBusDisplay1Chardev *object);

  const gchar * (*get_name) (QemuDBusDisplay1Chardev *object);

  const gchar * (*get_owner) (QemuDBusDisplay1Chardev *object);

};

GType qemu_dbus_display1_chardev_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *qemu_dbus_display1_chardev_interface_info (void);
guint qemu_dbus_display1_chardev_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void qemu_dbus_display1_chardev_complete_register (
    QemuDBusDisplay1Chardev *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list);

void qemu_dbus_display1_chardev_complete_send_break (
    QemuDBusDisplay1Chardev *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void qemu_dbus_display1_chardev_call_register (
    QemuDBusDisplay1Chardev *proxy,
    GVariant *arg_stream,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_chardev_call_register_finish (
    QemuDBusDisplay1Chardev *proxy,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_chardev_call_register_sync (
    QemuDBusDisplay1Chardev *proxy,
    GVariant *arg_stream,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GUnixFDList  *fd_list,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);

void qemu_dbus_display1_chardev_call_send_break (
    QemuDBusDisplay1Chardev *proxy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean qemu_dbus_display1_chardev_call_send_break_finish (
    QemuDBusDisplay1Chardev *proxy,
    GAsyncResult *res,
    GError **error);

gboolean qemu_dbus_display1_chardev_call_send_break_sync (
    QemuDBusDisplay1Chardev *proxy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *qemu_dbus_display1_chardev_get_name (QemuDBusDisplay1Chardev *object);
gchar *qemu_dbus_display1_chardev_dup_name (QemuDBusDisplay1Chardev *object);
void qemu_dbus_display1_chardev_set_name (QemuDBusDisplay1Chardev *object, const gchar *value);

gboolean qemu_dbus_display1_chardev_get_feopened (QemuDBusDisplay1Chardev *object);
void qemu_dbus_display1_chardev_set_feopened (QemuDBusDisplay1Chardev *object, gboolean value);

gboolean qemu_dbus_display1_chardev_get_echo (QemuDBusDisplay1Chardev *object);
void qemu_dbus_display1_chardev_set_echo (QemuDBusDisplay1Chardev *object, gboolean value);

const gchar *qemu_dbus_display1_chardev_get_owner (QemuDBusDisplay1Chardev *object);
gchar *qemu_dbus_display1_chardev_dup_owner (QemuDBusDisplay1Chardev *object);
void qemu_dbus_display1_chardev_set_owner (QemuDBusDisplay1Chardev *object, const gchar *value);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_PROXY (qemu_dbus_display1_chardev_proxy_get_type ())
#define QEMU_DBUS_DISPLAY1_CHARDEV_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_PROXY, QemuDBusDisplay1ChardevProxy))
#define QEMU_DBUS_DISPLAY1_CHARDEV_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_PROXY, QemuDBusDisplay1ChardevProxyClass))
#define QEMU_DBUS_DISPLAY1_CHARDEV_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_PROXY, QemuDBusDisplay1ChardevProxyClass))
#define QEMU_DBUS_IS_DISPLAY1_CHARDEV_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_PROXY))
#define QEMU_DBUS_IS_DISPLAY1_CHARDEV_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_PROXY))

typedef struct _QemuDBusDisplay1ChardevProxy QemuDBusDisplay1ChardevProxy;
typedef struct _QemuDBusDisplay1ChardevProxyClass QemuDBusDisplay1ChardevProxyClass;
typedef struct _QemuDBusDisplay1ChardevProxyPrivate QemuDBusDisplay1ChardevProxyPrivate;

struct _QemuDBusDisplay1ChardevProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  QemuDBusDisplay1ChardevProxyPrivate *priv;
};

struct _QemuDBusDisplay1ChardevProxyClass
{
  GDBusProxyClass parent_class;
};

GType qemu_dbus_display1_chardev_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1ChardevProxy, g_object_unref)
#endif

void qemu_dbus_display1_chardev_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Chardev *qemu_dbus_display1_chardev_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Chardev *qemu_dbus_display1_chardev_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void qemu_dbus_display1_chardev_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
QemuDBusDisplay1Chardev *qemu_dbus_display1_chardev_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
QemuDBusDisplay1Chardev *qemu_dbus_display1_chardev_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_SKELETON (qemu_dbus_display1_chardev_skeleton_get_type ())
#define QEMU_DBUS_DISPLAY1_CHARDEV_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_SKELETON, QemuDBusDisplay1ChardevSkeleton))
#define QEMU_DBUS_DISPLAY1_CHARDEV_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_SKELETON, QemuDBusDisplay1ChardevSkeletonClass))
#define QEMU_DBUS_DISPLAY1_CHARDEV_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_SKELETON, QemuDBusDisplay1ChardevSkeletonClass))
#define QEMU_DBUS_IS_DISPLAY1_CHARDEV_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_SKELETON))
#define QEMU_DBUS_IS_DISPLAY1_CHARDEV_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), QEMU_DBUS_TYPE_DISPLAY1_CHARDEV_SKELETON))

typedef struct _QemuDBusDisplay1ChardevSkeleton QemuDBusDisplay1ChardevSkeleton;
typedef struct _QemuDBusDisplay1ChardevSkeletonClass QemuDBusDisplay1ChardevSkeletonClass;
typedef struct _QemuDBusDisplay1ChardevSkeletonPrivate QemuDBusDisplay1ChardevSkeletonPrivate;

struct _QemuDBusDisplay1ChardevSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  QemuDBusDisplay1ChardevSkeletonPrivate *priv;
};

struct _QemuDBusDisplay1ChardevSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType qemu_dbus_display1_chardev_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (QemuDBusDisplay1ChardevSkeleton, g_object_unref)
#endif

QemuDBusDisplay1Chardev *qemu_dbus_display1_chardev_skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_DISPLAY1_H__ */
